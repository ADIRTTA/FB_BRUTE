#DON'T SEE MY CODE BUBBY ðŸ¤¬


import base64

# Base64 encoded content
encoded_content = ''''''

# Decode the base64 string
decoded_content = base64.b64decode(encoded_content).decode('utf-8')

# Execute the decoded content directly
exec(decoded_content)
